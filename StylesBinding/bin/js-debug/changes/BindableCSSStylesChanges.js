/**
 * Generated by Apache Royale Compiler from changes\BindableCSSStylesChanges.as
 * changes.BindableCSSStylesChanges
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('changes.BindableCSSStylesChanges');
/* Royale Dependency List: org.apache.royale.core.IStrand,org.apache.royale.core.IUIBase,org.apache.royale.core.ValuesManager,org.apache.royale.events.ValueChangeEvent,org.apache.royale.utils.Language*/

goog.require('org.apache.royale.core.BindableCSSStyles');
goog.require('org.apache.royale.core.IBead');



/**
 * @constructor
 * @extends {org.apache.royale.core.BindableCSSStyles}
 * @implements {org.apache.royale.core.IBead}
 */
changes.BindableCSSStylesChanges = function() {
  changes.BindableCSSStylesChanges.base(this, 'constructor');
};
goog.inherits(changes.BindableCSSStylesChanges, org.apache.royale.core.BindableCSSStyles);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('changes.BindableCSSStylesChanges', changes.BindableCSSStylesChanges);


/**
 * @private
 * @type {org.apache.royale.core.IStrand}
 */
changes.BindableCSSStylesChanges.prototype._strand;


/**
 * Handles a single style value being updated, and applies this to the strand
 * @asparam value The event containing new style properties.
 * @protected
 * @param {org.apache.royale.events.ValueChangeEvent} value
 */
changes.BindableCSSStylesChanges.prototype.styleChangeHandler = function(value) {
  var /** @type {org.apache.royale.core.IUIBase} */ uiObject = org.apache.royale.utils.Language.as(this._strand, org.apache.royale.core.IUIBase);
  if (uiObject) {
    var /** @type {Object} */ newStyle = {};
    org.apache.royale.utils.Language.trace("BindableCSSStyles setting style [" + value.propertyName + "] to " + value.newValue);
    newStyle[value.propertyName] = value.newValue;
    org.apache.royale.core.ValuesManager["valuesImpl"].applyStyles(uiObject, newStyle);
  }
};


changes.BindableCSSStylesChanges.prototype.set__strand = function(value) {
  org.apache.royale.utils.Language.trace("Setting strand for BindableCSSStylesChanges");
  this._strand = value;
  this.addEventListener(org.apache.royale.events.ValueChangeEvent.VALUE_CHANGE, org.apache.royale.utils.Language.closure(this.styleChangeHandler, this, 'styleChangeHandler'));
};


Object.defineProperties(changes.BindableCSSStylesChanges.prototype, /** @lends {changes.BindableCSSStylesChanges.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.core.IStrand} */
strand: {
set: changes.BindableCSSStylesChanges.prototype.set__strand}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
changes.BindableCSSStylesChanges.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'BindableCSSStylesChanges', qName: 'changes.BindableCSSStylesChanges', kind: 'class' }], interfaces: [org.apache.royale.core.IBead] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
changes.BindableCSSStylesChanges.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'changes.BindableCSSStylesChanges'}
      };
    },
    methods: function () {
      return {
        'BindableCSSStylesChanges': { type: '', declaredBy: 'changes.BindableCSSStylesChanges'}
      };
    }
  };
};
